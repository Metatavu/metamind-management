/* tslint:disable */
/* eslint-disable */
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExportedStory,
    ExportedStoryFromJSON,
    ExportedStoryToJSON,
    Story,
    StoryFromJSON,
    StoryToJSON,
} from '../models';

export interface ExportStoryRequest {
    storyId: string;
}

export interface ImportStoryRequest {
    exportedStory: ExportedStory;
}

/**
 * 
 */
export class StoryExportApi extends runtime.BaseAPI {

    /**
     * export story
     * Export a story
     */
    async exportStoryRaw(requestParameters: ExportStoryRequest): Promise<runtime.ApiResponse<ExportedStory>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling exportStory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/storyExport/{storyId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportedStoryFromJSON(jsonValue));
    }

    /**
     * export story
     * Export a story
     */
    async exportStory(requestParameters: ExportStoryRequest): Promise<ExportedStory> {
        const response = await this.exportStoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Import story
     * Import a story
     */
    async importStoryRaw(requestParameters: ImportStoryRequest): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters.exportedStory === null || requestParameters.exportedStory === undefined) {
            throw new runtime.RequiredError('exportedStory','Required parameter requestParameters.exportedStory was null or undefined when calling importStory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/storyImport/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportedStoryToJSON(requestParameters.exportedStory),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Import story
     * Import a story
     */
    async importStory(requestParameters: ImportStoryRequest): Promise<Story> {
        const response = await this.importStoryRaw(requestParameters);
        return await response.value();
    }

}
