/* tslint:disable */
/* eslint-disable */
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Coordinates,
    CoordinatesFromJSON,
    CoordinatesFromJSONTyped,
    CoordinatesToJSON,
    KnotType,
    KnotTypeFromJSON,
    KnotTypeFromJSONTyped,
    KnotTypeToJSON,
    TokenizerType,
    TokenizerTypeFromJSON,
    TokenizerTypeFromJSONTyped,
    TokenizerTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ExportedStoryKnot
 */
export interface ExportedStoryKnot {
    /**
     * knot id.
     * @type {string}
     * @memberof ExportedStoryKnot
     */
    id?: string;
    /**
     * 
     * @type {KnotType}
     * @memberof ExportedStoryKnot
     */
    type: KnotType;
    /**
     * 
     * @type {TokenizerType}
     * @memberof ExportedStoryKnot
     */
    tokenizer: TokenizerType;
    /**
     * 
     * @type {string}
     * @memberof ExportedStoryKnot
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ExportedStoryKnot
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof ExportedStoryKnot
     */
    hint?: string;
    /**
     * 
     * @type {Coordinates}
     * @memberof ExportedStoryKnot
     */
    coordinates?: Coordinates;
}

export function ExportedStoryKnotFromJSON(json: any): ExportedStoryKnot {
    return ExportedStoryKnotFromJSONTyped(json, false);
}

export function ExportedStoryKnotFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportedStoryKnot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': KnotTypeFromJSON(json['type']),
        'tokenizer': TokenizerTypeFromJSON(json['tokenizer']),
        'name': json['name'],
        'content': json['content'],
        'hint': !exists(json, 'hint') ? undefined : json['hint'],
        'coordinates': !exists(json, 'coordinates') ? undefined : CoordinatesFromJSON(json['coordinates']),
    };
}

export function ExportedStoryKnotToJSON(value?: ExportedStoryKnot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': KnotTypeToJSON(value.type),
        'tokenizer': TokenizerTypeToJSON(value.tokenizer),
        'name': value.name,
        'content': value.content,
        'hint': value.hint,
        'coordinates': CoordinatesToJSON(value.coordinates),
    };
}


